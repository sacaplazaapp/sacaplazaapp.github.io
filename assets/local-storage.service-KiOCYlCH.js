var S=Object.defineProperty;var I=(o,e,t)=>e in o?S(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var n=(o,e,t)=>(I(o,typeof e!="symbol"?e+"":e,t),t);import{C as f}from"./index-BKKrNcFQ.js";class y{constructor(){n(this,"initialized",!1);n(this,"flashcardsKey","chess_flashcards");n(this,"progressKey","chess_progress");n(this,"nextIdKey","chess_next_id")}async initializeDatabase(){try{if(console.log("Platform: ".concat(f.getPlatform())),f.getPlatform()==="web")console.log("Using localStorage fallback for web development"),this.initializeLocalStorage();else throw new Error("Native SQLite not implemented in fallback service");this.initialized=!0,console.log("LocalStorage fallback initialized successfully")}catch(e){throw console.error("Error initializing fallback database:",e),e}}initializeLocalStorage(){localStorage.getItem(this.flashcardsKey)||localStorage.setItem(this.flashcardsKey,JSON.stringify([])),localStorage.getItem(this.progressKey)||localStorage.setItem(this.progressKey,JSON.stringify([])),localStorage.getItem(this.nextIdKey)||localStorage.setItem(this.nextIdKey,"1")}getNextId(){const e=parseInt(localStorage.getItem(this.nextIdKey)||"1");return localStorage.setItem(this.nextIdKey,(e+1).toString()),e}checkInitialized(){if(!this.initialized)throw new Error("Database not initialized")}async addFlashcard(e,t,s,a,r="",i="",h=""){this.checkInitialized();const d=JSON.parse(localStorage.getItem(this.flashcardsKey)||"[]"),l=this.getNextId(),c=new Date().toISOString(),g={id:l,title:e,question:t,comment:s,answer:a,tags:r,fen1:i,fen2:h,created:c,updated:c};return d.push(g),localStorage.setItem(this.flashcardsKey,JSON.stringify(d)),console.log("Flashcard added:",g),l}async getFlashcards(){return this.checkInitialized(),JSON.parse(localStorage.getItem(this.flashcardsKey)||"[]").sort((t,s)=>new Date(s.created).getTime()-new Date(t.created).getTime())}async updateFlashcard(e,t,s,a,r,i="",h="",d=""){this.checkInitialized();const l=JSON.parse(localStorage.getItem(this.flashcardsKey)||"[]"),c=l.findIndex(g=>g.id===e);if(c===-1)throw new Error("Flashcard with id ".concat(e," not found"));l[c]={...l[c],title:t,question:s,comment:a,answer:r,tags:i,fen1:h,fen2:d,updated:new Date().toISOString()},localStorage.setItem(this.flashcardsKey,JSON.stringify(l))}async deleteFlashcard(e){this.checkInitialized();const s=JSON.parse(localStorage.getItem(this.flashcardsKey)||"[]").filter(i=>i.id!==e);localStorage.setItem(this.flashcardsKey,JSON.stringify(s));const r=JSON.parse(localStorage.getItem(this.progressKey)||"[]").filter(i=>i.flashcard_id!==e);localStorage.setItem(this.progressKey,JSON.stringify(r))}async recordAnswer(e,t){this.checkInitialized();const s=JSON.parse(localStorage.getItem(this.progressKey)||"[]"),a=s.findIndex(r=>r.flashcard_id===e);if(a!==-1)t?s[a].correct_answers++:s[a].incorrect_answers++,s[a].last_reviewed=new Date().toISOString();else{const r={id:this.getNextId(),flashcard_id:e,correct_answers:t?1:0,incorrect_answers:t?0:1,last_reviewed:new Date().toISOString()};s.push(r)}localStorage.setItem(this.progressKey,JSON.stringify(s))}async getFlashcardProgress(e){return this.checkInitialized(),JSON.parse(localStorage.getItem(this.progressKey)||"[]").find(s=>s.flashcard_id===e)||null}async closeDatabase(){this.initialized=!1,console.log("LocalStorage fallback service closed")}getConnection(){return null}}const w=new y;export{w as default};
