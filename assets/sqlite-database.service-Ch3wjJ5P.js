const __vite__fileDeps=["assets/web-BcCs-Iap.js","assets/index-B7ILDIbZ.js","assets/index-B-Ytd-TX.css"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
var y=Object.defineProperty;var m=(o,e,t)=>e in o?y(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var l=(o,e,t)=>(m(o,typeof e!="symbol"?e+"":e,t),t);import{r as w,_ as b,C as P}from"./index-B7ILDIbZ.js";class E{constructor(e){this.sqlite=e,this._connectionDict=new Map}async initWebStore(){try{return await this.sqlite.initWebStore(),Promise.resolve()}catch(e){return Promise.reject(e)}}async saveToStore(e){try{return await this.sqlite.saveToStore({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async saveToLocalDisk(e){try{return await this.sqlite.saveToLocalDisk({database:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async getFromLocalDiskToStore(e){const t=e!=null?e:!0;try{return await this.sqlite.getFromLocalDiskToStore({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async echo(e){try{const t=await this.sqlite.echo({value:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isSecretStored(){try{const e=await this.sqlite.isSecretStored();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async setEncryptionSecret(e){try{return await this.sqlite.setEncryptionSecret({passphrase:e}),Promise.resolve()}catch(t){return Promise.reject(t)}}async changeEncryptionSecret(e,t){try{return await this.sqlite.changeEncryptionSecret({passphrase:e,oldpassphrase:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async clearEncryptionSecret(){try{return await this.sqlite.clearEncryptionSecret(),Promise.resolve()}catch(e){return Promise.reject(e)}}async checkEncryptionSecret(e){try{const t=await this.sqlite.checkEncryptionSecret({passphrase:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async addUpgradeStatement(e,t){try{return e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.addUpgradeStatement({database:e,upgrade:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async createConnection(e,t,r,s,n){try{e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.createConnection({database:e,encrypted:t,mode:r,version:s,readonly:n});const i=new u(e,n,this.sqlite),a=n?"RO_".concat(e):"RW_".concat(e);return this._connectionDict.set(a,i),Promise.resolve(i)}catch(i){return Promise.reject(i)}}async closeConnection(e,t){try{e.endsWith(".db")&&(e=e.slice(0,-3)),await this.sqlite.closeConnection({database:e,readonly:t});const r=t?"RO_".concat(e):"RW_".concat(e);return this._connectionDict.delete(r),Promise.resolve()}catch(r){return Promise.reject(r)}}async isConnection(e,t){const r={};e.endsWith(".db")&&(e=e.slice(0,-3));const s=t?"RO_".concat(e):"RW_".concat(e);return r.result=this._connectionDict.has(s),Promise.resolve(r)}async retrieveConnection(e,t){e.endsWith(".db")&&(e=e.slice(0,-3));const r=t?"RO_".concat(e):"RW_".concat(e);if(this._connectionDict.has(r)){const s=this._connectionDict.get(r);return typeof s<"u"?Promise.resolve(s):Promise.reject("Connection ".concat(e," is undefined"))}else return Promise.reject("Connection ".concat(e," does not exist"))}async getNCDatabasePath(e,t){try{const r=await this.sqlite.getNCDatabasePath({path:e,database:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}}async createNCConnection(e,t){try{await this.sqlite.createNCConnection({databasePath:e,version:t});const r=new u(e,!0,this.sqlite),s="RO_".concat(e,")");return this._connectionDict.set(s,r),Promise.resolve(r)}catch(r){return Promise.reject(r)}}async closeNCConnection(e){try{await this.sqlite.closeNCConnection({databasePath:e});const t="RO_".concat(e,")");return this._connectionDict.delete(t),Promise.resolve()}catch(t){return Promise.reject(t)}}async isNCConnection(e){const t={},r="RO_".concat(e,")");return t.result=this._connectionDict.has(r),Promise.resolve(t)}async retrieveNCConnection(e){if(this._connectionDict.has(e)){const t="RO_".concat(e,")"),r=this._connectionDict.get(t);return typeof r<"u"?Promise.resolve(r):Promise.reject("Connection ".concat(e," is undefined"))}else return Promise.reject("Connection ".concat(e," does not exist"))}async isNCDatabase(e){try{const t=await this.sqlite.isNCDatabase({databasePath:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async retrieveAllConnections(){return this._connectionDict}async closeAllConnections(){const e=new Map;try{for(const t of this._connectionDict.keys()){const r=t.substring(3),s=t.substring(0,3)==="RO_";await this.sqlite.closeConnection({database:r,readonly:s}),e.set(t,null)}for(const t of e.keys())this._connectionDict.delete(t);return Promise.resolve()}catch(t){return Promise.reject(t)}}async checkConnectionsConsistency(){try{const e=[...this._connectionDict.keys()],t=[],r=[];for(const n of e)t.push(n.substring(0,2)),r.push(n.substring(3));const s=await this.sqlite.checkConnectionsConsistency({dbNames:r,openModes:t});return s.result||(this._connectionDict=new Map),Promise.resolve(s)}catch(e){return this._connectionDict=new Map,Promise.reject(e)}}async importFromJson(e){try{const t=await this.sqlite.importFromJson({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isJsonValid(e){try{const t=await this.sqlite.isJsonValid({jsonstring:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async copyFromAssets(e){const t=e!=null?e:!0;try{return await this.sqlite.copyFromAssets({overwrite:t}),Promise.resolve()}catch(r){return Promise.reject(r)}}async getFromHTTPRequest(e,t){const r=t!=null?t:!0;try{return await this.sqlite.getFromHTTPRequest({url:e,overwrite:r}),Promise.resolve()}catch(s){return Promise.reject(s)}}async isDatabaseEncrypted(e){e.endsWith(".db")&&(e=e.slice(0,-3));try{const t=await this.sqlite.isDatabaseEncrypted({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isInConfigEncryption(){try{const e=await this.sqlite.isInConfigEncryption();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isInConfigBiometricAuth(){try{const e=await this.sqlite.isInConfigBiometricAuth();return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isDatabase(e){e.endsWith(".db")&&(e=e.slice(0,-3));try{const t=await this.sqlite.isDatabase({database:e});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async getDatabaseList(){try{const t=(await this.sqlite.getDatabaseList()).values;t.sort();const r={values:t};return Promise.resolve(r)}catch(e){return Promise.reject(e)}}async getMigratableDbList(e){const t=e||"default";try{const r=await this.sqlite.getMigratableDbList({folderPath:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}}async addSQLiteSuffix(e,t){const r=e||"default",s=t||[];try{const n=await this.sqlite.addSQLiteSuffix({folderPath:r,dbNameList:s});return Promise.resolve(n)}catch(n){return Promise.reject(n)}}async deleteOldDatabases(e,t){const r=e||"default",s=t||[];try{const n=await this.sqlite.deleteOldDatabases({folderPath:r,dbNameList:s});return Promise.resolve(n)}catch(n){return Promise.reject(n)}}async moveDatabasesAndAddSuffix(e,t){const r=e||"default",s=t||[];return this.sqlite.moveDatabasesAndAddSuffix({folderPath:r,dbNameList:s})}}class u{constructor(e,t,r){this.dbName=e,this.readonly=t,this.sqlite=r}getConnectionDBName(){return this.dbName}getConnectionReadOnly(){return this.readonly}async open(){try{return await this.sqlite.open({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}}async close(){try{return await this.sqlite.close({database:this.dbName,readonly:this.readonly}),Promise.resolve()}catch(e){return Promise.reject(e)}}async beginTransaction(){try{const e=await this.sqlite.beginTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async commitTransaction(){try{const e=await this.sqlite.commitTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async rollbackTransaction(){try{const e=await this.sqlite.rollbackTransaction({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isTransactionActive(){try{const e=await this.sqlite.isTransactionActive({database:this.dbName});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async loadExtension(e){try{return await this.sqlite.loadExtension({database:this.dbName,path:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}}async enableLoadExtension(e){try{return await this.sqlite.enableLoadExtension({database:this.dbName,toggle:e,readonly:this.readonly}),Promise.resolve()}catch(t){return Promise.reject(t)}}async getUrl(){try{const e=await this.sqlite.getUrl({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async getVersion(){try{const e=await this.sqlite.getVersion({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async getTableList(){try{const e=await this.sqlite.getTableList({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async execute(e,t=!0,r=!0){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{const s=await this.sqlite.execute({database:this.dbName,statements:e,transaction:t,readonly:!1,isSQL92:r});return Promise.resolve(s)}}catch(s){return Promise.reject(s)}}async query(e,t,r=!0){let s;try{return t&&t.length>0?s=await this.sqlite.query({database:this.dbName,statement:e,values:t,readonly:this.readonly,isSQL92:!0}):s=await this.sqlite.query({database:this.dbName,statement:e,values:[],readonly:this.readonly,isSQL92:r}),s=await this.reorderRows(s),Promise.resolve(s)}catch(n){return Promise.reject(n)}}async run(e,t,r=!0,s="no",n=!0){let i;try{return this.readonly?Promise.reject("not allowed in read-only mode"):(t&&t.length>0?i=await this.sqlite.run({database:this.dbName,statement:e,values:t,transaction:r,readonly:!1,returnMode:s,isSQL92:!0}):i=await this.sqlite.run({database:this.dbName,statement:e,values:[],transaction:r,readonly:!1,returnMode:s,isSQL92:n}),i.changes=await this.reorderRows(i.changes),Promise.resolve(i))}catch(a){return Promise.reject(a)}}async executeSet(e,t=!0,r="no",s=!0){let n;try{return this.readonly?Promise.reject("not allowed in read-only mode"):(n=await this.sqlite.executeSet({database:this.dbName,set:e,transaction:t,readonly:!1,returnMode:r,isSQL92:s}),n.changes=await this.reorderRows(n.changes),Promise.resolve(n))}catch(i){return Promise.reject(i)}}async isExists(){try{const e=await this.sqlite.isDBExists({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async isTable(e){try{const t=await this.sqlite.isTableExists({database:this.dbName,table:e,readonly:this.readonly});return Promise.resolve(t)}catch(t){return Promise.reject(t)}}async isDBOpen(){try{const e=await this.sqlite.isDBOpen({database:this.dbName,readonly:this.readonly});return Promise.resolve(e)}catch(e){return Promise.reject(e)}}async delete(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.deleteDatabase({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}}async createSyncTable(){try{if(this.readonly)return Promise.reject("not allowed in read-only mode");{const e=await this.sqlite.createSyncTable({database:this.dbName,readonly:!1});return Promise.resolve(e)}}catch(e){return Promise.reject(e)}}async setSyncDate(e){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.setSyncDate({database:this.dbName,syncdate:e,readonly:!1}),Promise.resolve())}catch(t){return Promise.reject(t)}}async getSyncDate(){try{const e=await this.sqlite.getSyncDate({database:this.dbName,readonly:this.readonly});let t="";return e.syncDate>0&&(t=new Date(e.syncDate*1e3).toISOString()),Promise.resolve(t)}catch(e){return Promise.reject(e)}}async exportToJson(e,t=!1){try{const r=await this.sqlite.exportToJson({database:this.dbName,jsonexportmode:e,readonly:this.readonly,encrypted:t});return Promise.resolve(r)}catch(r){return Promise.reject(r)}}async deleteExportedRows(){try{return this.readonly?Promise.reject("not allowed in read-only mode"):(await this.sqlite.deleteExportedRows({database:this.dbName,readonly:!1}),Promise.resolve())}catch(e){return Promise.reject(e)}}async executeTransaction(e,t=!0){let r=0,s=!1;if(this.readonly)return Promise.reject("not allowed in read-only mode");if(await this.sqlite.beginTransaction({database:this.dbName}),s=await this.sqlite.isTransactionActive({database:this.dbName}),!s)return Promise.reject("After Begin Transaction, no transaction active");try{for(const a of e){if(typeof a!="object"||!("statement"in a))throw new Error("Error a task.statement must be provided");if("values"in a&&a.values&&a.values.length>0){const c=a.statement.toUpperCase().includes("RETURNING")?"all":"no",h=await this.sqlite.run({database:this.dbName,statement:a.statement,values:a.values,transaction:!1,readonly:!1,returnMode:c,isSQL92:t});if(h.changes.changes<0)throw new Error("Error in transaction method run ");r+=h.changes.changes}else{const c=await this.sqlite.execute({database:this.dbName,statements:a.statement,transaction:!1,readonly:!1});if(c.changes.changes<0)throw new Error("Error in transaction method execute ");r+=c.changes.changes}}const n=await this.sqlite.commitTransaction({database:this.dbName});r+=n.changes.changes;const i={changes:{changes:r}};return Promise.resolve(i)}catch(n){const i=n.message?n.message:n;return await this.sqlite.rollbackTransaction({database:this.dbName}),Promise.reject(i)}}async reorderRows(e){const t=e;if(e!=null&&e.values&&typeof e.values[0]=="object"&&Object.keys(e.values[0]).includes("ios_columns")){const r=e.values[0].ios_columns,s=[];for(let n=1;n<e.values.length;n++){const i=e.values[n],a={};for(const c of r)a[c]=i[c];s.push(a)}t.values=s}return Promise.resolve(t)}}const f=w("CapacitorSQLite",{web:()=>b(()=>import("./web-BcCs-Iap.js"),__vite__mapDeps([0,1,2])).then(o=>new o.CapacitorSQLiteWeb),electron:()=>window.CapacitorCustomPlatform.plugins.CapacitorSQLite});class g{constructor(){l(this,"sqlite");l(this,"db",null);l(this,"dbName","chess_flashcards.db");l(this,"dbVersion",1);this.sqlite=new E(f)}async initializeDatabase(){try{console.log("Initializing native SQLite database for platform: ".concat(P.getPlatform())),console.log("Checking SQLite connection consistency...");const e=await this.sqlite.checkConnectionsConsistency();console.log("SQLite connection consistency:",e);const t=await this.sqlite.checkConnectionsConsistency(),r=(await this.sqlite.isConnection(this.dbName,!1)).result;t.result&&r?(console.log("Retrieving existing connection..."),this.db=await this.sqlite.retrieveConnection(this.dbName,!1)):(console.log("Creating new database connection..."),this.db=await this.sqlite.createConnection(this.dbName,!1,"no-encryption",this.dbVersion,!1)),console.log("Opening database..."),await this.db.open(),console.log("Creating tables..."),await this.createTables(),console.log("Native SQLite database initialized successfully")}catch(e){throw console.error("Error initializing native SQLite database:",e),e}}async createTables(){if(!this.db)throw new Error("Database not initialized");const e="\n      CREATE TABLE IF NOT EXISTS flashcards (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        question TEXT NOT NULL,\n        comment TEXT,\n        answer TEXT NOT NULL,\n        tags TEXT,\n        fen1 TEXT,\n        fen2 TEXT,\n        created DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n    ",t="\n      CREATE TABLE IF NOT EXISTS user_progress (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        flashcard_id INTEGER,\n        correct_answers INTEGER DEFAULT 0,\n        incorrect_answers INTEGER DEFAULT 0,\n        last_reviewed DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (flashcard_id) REFERENCES flashcards (id)\n      );\n    ";try{await this.db.execute(e),await this.db.execute(t),console.log("Tables created successfully")}catch(r){throw console.error("Error creating tables:",r),r}}getConnection(){return this.db}async closeDatabase(){if(this.db)try{await this.db.close(),await this.sqlite.closeConnection(this.dbName,!1),this.db=null,console.log("Native SQLite database closed successfully")}catch(e){throw console.error("Error closing native SQLite database:",e),e}}async addFlashcard(e,t,r,s,n,i,a){var d;if(!this.db)throw new Error("Database not initialized");return((d=(await this.db.run("\n      INSERT INTO flashcards (title, question, comment, answer, tags, fen1, fen2)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    ",[e,t,r,s,n||"",i||"",a||""])).changes)==null?void 0:d.lastId)||0}async getFlashcards(){if(!this.db)throw new Error("Database not initialized");let e="SELECT * FROM flashcards";const t=[];return e+=" ORDER BY created DESC",(await this.db.query(e,t)).values||[]}async updateFlashcard(e,t,r,s,n,i,a,c){if(!this.db)throw new Error("Database not initialized");await this.db.run("\n      UPDATE flashcards \n      SET title = ?, question = ?, comment = ?, answer = ?, tags = ?, fen1 = ?, fen2 = ?, updated = CURRENT_TIMESTAMP\n      WHERE id = ?\n    ",[t,r,s,n,i||"",a||"",c||"",e])}async deleteFlashcard(e){if(!this.db)throw new Error("Database not initialized");await this.db.run("DELETE FROM flashcards WHERE id = ?",[e]),await this.db.run("DELETE FROM user_progress WHERE flashcard_id = ?",[e])}async recordAnswer(e,t){if(!this.db)throw new Error("Database not initialized");const s=await this.db.query("SELECT id FROM user_progress WHERE flashcard_id = ?",[e]);if(s.values&&s.values.length>0){const n="\n        UPDATE user_progress \n        SET ".concat(t?"correct_answers = correct_answers + 1":"incorrect_answers = incorrect_answers + 1",",\n            last_reviewed = CURRENT_TIMESTAMP\n        WHERE flashcard_id = ?\n      ");await this.db.run(n,[e])}else await this.db.run("\n        INSERT INTO user_progress (flashcard_id, correct_answers, incorrect_answers)\n        VALUES (?, ?, ?)\n      ",[e,t?1:0,t?0:1])}async getFlashcardProgress(e){var s;if(!this.db)throw new Error("Database not initialized");return((s=(await this.db.query("SELECT * FROM user_progress WHERE flashcard_id = ?",[e])).values)==null?void 0:s[0])||null}}const q=new g;export{q as default};
